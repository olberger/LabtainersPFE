#!/usr/bin/env python3
'''
This software was created by United States Government employees at 
The Center for Cybersecurity and Cyber Operations (C3O) 
at the Naval Postgraduate School NPS.  Please note that within the 
United States, copyright protection is not available for any works 
created  by United States Government employees, pursuant to Title 17 
United States Code Section 105.   This software is in the public domain 
and is not subject to copyright. 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
'''
import sys
import os
import shutil
import argparse
import subprocess
import shlex
import pydoc
import getpass
import glob
import zipfile
import time
import saki
import ParseLabtainerConfig
import registry

instructor_cwd = os.getcwd()
student_cwd = instructor_cwd.replace('labtainer-instructor', 'labtainer-student')
# Append Student CWD to sys.path
sys.path.append(student_cwd+"/bin")
sys.path.append(os.path.join(instructor_cwd, 'assess_bin'))
import labutils
import LabtainerLogging
import docgoals
FAILURE=1
WEB_PORT=8008
# Copy Students' Artifacts from host to instructor's lab container
def CopyStudentArtifacts(labtainer_config, container_name, labname, regress_test, check_watermark):
    # Set the lab name 
    command = 'docker exec %s script -q -c "mkdir -p /home/instructor/.local" /dev/null' % (container_name)
    logger.debug("Command to execute is (%s)" % command)
    result = subprocess.call(command, shell=True)
    logger.debug("Result of subprocess.call CopyStudentArtifacts set labname is %s (1=>FAILURE)" % result)
    if result == FAILURE:
        logger.error("Failed to set labname in container %s!\n" % container_name)
        sys.exit(1)

    command = 'docker exec %s script -q -c "echo %s > /home/instructor/.local/.labname" /dev/null' % (container_name, labname)
    logger.debug("Command to execute is (%s)" % command)
    result = subprocess.call(command, shell=True)
    logger.debug("Result of subprocess.call CopyStudentArtifacts set labname is %s (1=>FAILURE)" % result)
    if result == FAILURE:
        logger.error("Failed to set labname in container %s!\n" % container_name)
        sys.exit(1)

    # Create is_grade_container
    username = getpass.getuser()
    # Make sure check for is_regress_test first
    if regress_test is not None:
        xfer_dir = ""
        # then check if it is watermark test required
        if check_watermark:
            xfer_dir = os.path.join(labtainer_config.watermark_root, labname)
        else:
            xfer_dir = os.path.dirname(regress_test)
        zip_filelist = glob.glob('%s/*.zip' % xfer_dir)
        lab_filelist = glob.glob('%s/*.lab' % xfer_dir)
    else:
        xfer_dir = os.path.join(labtainer_config.host_home_xfer, labname)
        zip_filelist = glob.glob('/home/%s/%s/*.zip' % (username, xfer_dir))
        lab_filelist = glob.glob('/home/%s/%s/*.lab' % (username, xfer_dir))
    zip_filelist.extend(lab_filelist)
    #logger.debug("zip_filelist is (%s)" % zip_filelist)
    # Copy zip files from 'Shared' folder to 'home/$CONTAINER_USER'
    for fname in zip_filelist:
        logger.debug("name is %s" % fname)
        base_fname = os.path.basename(fname)
        if saki.isMoodle(fname):
            continue
        if base_fname.startswith('bulk_download'):
            continue
        # check for Moodle fu 
        if 'assignsubmission_file_' in base_fname:
            new_fname = base_fname.split('assignsubmission_file_')[1]
        else:
            new_fname = base_fname
        # Copy zip file 
        if labname not in new_fname:
            if not (saki.isSaki(new_fname) or saki.isMoodle(new_fname)):
                logger.warning('This file does not appear to be a result from lab %s: %s' % (labname, fname))
            continue
        command = 'docker cp "%s" %s:/home/instructor/%s' % (fname, container_name, new_fname)
        logger.debug("Command to execute is (%s)" % command)
        result = subprocess.call(shlex.split(command))
        logger.debug("Result of subprocess.call CopyStudentArtifacts copy zipfile (%s) is %s (1=>FAILURE)" % (fname, result))
        if result == FAILURE:
            logger.error("Failed to copy student artifacts into container %s!\n" % container_name)
            sys.exit(1)
        
        cmd = 'docker exec %s chown instructor:instructor "/home/instructor/%s"' % (container_name, new_fname)
        if not labutils.DockerCmd(cmd):
            logger.error('chown of zip failed %s' % new_fname)

def InstDocsToHostDir(labname, labtainer_config, lab_path):
    xfer_dir = os.path.join(labtainer_config.host_home_xfer, labname)
    username = getpass.getuser()
    host_home_xfer = '/home/%s/%s' % (username, xfer_dir)
    logger.debug("path to work with is (%s)" % host_home_xfer)
    logger.debug("labname is (%s)" % labname)
    docsdir_created = False
    docsdir_path = '%s/docs' % host_home_xfer

    # create temporary directory
    tmpdir = '%s/.tmpdir' % host_home_xfer
    labutils.createDirectoryPath(tmpdir)

    split_string = '.%s.zip' % labname

    zip_filelist = glob.glob('%s/*.zip' % host_home_xfer)
    logger.debug("filenames is (%s)" % zip_filelist)
    tmpdocszip = '%s/docs.zip' % tmpdir
    # Process each zip file in host_home_xfer
    for fname in zip_filelist:
        ZipFileName = os.path.basename(fname)
        # Note: at this point the ZipFileName should not have the 'containername' yet
        #       the format should be <student_email>.<labname>.zip
        logger.debug("ZipFileName is (%s)" % ZipFileName)

        # Try unpacking the zip file into temporary directory to check if docs.zip exist
        zipoutput = zipfile.ZipFile(fname, "r")
        ''' retain dates of student files '''
        for zi in zipoutput.infolist():
            logger.debug('zi is %s tmpdir is %s' % (zi.filename, tmpdir))
            zipoutput.extract(zi, tmpdir)
            date_time = time.mktime(zi.date_time + (0, 0, -1))
            dest = os.path.join(tmpdir, zi.filename)
            os.utime(dest, (date_time, date_time))
        zipoutput.close()

        # If docs.zip exist
        if os.path.exists(tmpdocszip):
            # Time to create docs directory if it hasn't been created
            if not docsdir_created:
                docsdir_created = True
                labutils.createDirectoryPath(docsdir_path)

            # Note: at this point the ZipFileName should not have the 'containername' yet
            #       the format should be <student_email>.<labname>.zip
            splitlist = ZipFileName.split(split_string)
            student_email = splitlist[0]
            student_emaildir = '%s/%s' % (docsdir_path, student_email)
            logger.debug("student_email is (%s)" % student_email)
            logger.debug("student_emaildir is (%s)" % student_emaildir)

            # Create student's e-mail directory (if it does not exist)
            labutils.createDirectoryPath(student_emaildir)
            # Unpacking the docs.zip file into student's e-mail directory
            zipoutput = zipfile.ZipFile(tmpdocszip, "r")
            ''' retain dates of student files '''
            for zi in zipoutput.infolist():
                zipoutput.extract(zi, student_emaildir)
                date_time = time.mktime(zi.date_time + (0, 0, -1))
                dest = os.path.join(student_emaildir, zi.filename)
                os.utime(dest, (date_time, date_time))
            zipoutput.close()

        # remove and re-create temporary directory for the students' zip file
        shutil.rmtree(tmpdir, ignore_errors=True)
        try:
            os.makedirs(tmpdir)
        except:
            pass

    # Finally done for all students' zip file in the host_home_xfer directory
    # Final removal of temporary directory
    shutil.rmtree(tmpdir, ignore_errors=True)

def copyAssessBin(container_name, test_web):
    tmp_dir='/tmp/assess_bin'
    shutil.rmtree(tmp_dir, ignore_errors=True)
    try:
        os.makedirs(tmp_dir)
    except:
        logger.error("did not expect to find dir %s" % tmp_dir)
    shutil.copytree('assess_bin', os.path.join(tmp_dir, 'bin'))
    if not test_web:
        shutil.copytree('flask', os.path.join(tmp_dir, 'flask'))
    shutil.copyfile('../labtainer-student/bin/LabCount.py', os.path.join(tmp_dir, 'bin', 'LabCount.py'))
    shutil.copyfile('../labtainer-student/lab_bin/ParameterParser.py', os.path.join(tmp_dir, 'bin', 'ParameterParser.py'))
    shutil.copyfile('../labtainer-student/lab_bin/ParameterizeLogging.py', os.path.join(tmp_dir, 'bin', 'ParameterizeLogging.py'))
    
    command = 'docker cp /tmp/assess_bin/bin  %s:/home/instructor/.local/' % (container_name)
    logger.debug("Command to execute is (%s)" % command)

    ps = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output = ps.communicate()
    if len(output[1].decode('utf-8').strip()) != 0:
        for line in output[1].decode('utf-8').splitlines():
            logger.debug(line.decode('utf-8'))
        logger.error("Failed copy assess_bin %s!\n" % container_name)
        sys.exit(1)
    command = 'docker cp /tmp/assess_bin/flask  %s:/home/instructor/.local/' % (container_name)
    logger.debug("Command to execute is (%s)" % command)

    if not test_web:
        ps = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = ps.communicate()
        if len(output[1].decode('utf-8').strip()) != 0:
            for line in output[1].decode('utf-8').splitlines():
                logger.debug(line)
            logger.error("Failed copy flask %s!\n" % container_name)
            sys.exit(1)



def copyChownGradesFile(labtainer_config, labname, grade_container, container_user, copy_json):
    host_home_xfer = os.path.join(labtainer_config.host_home_xfer, labname)

    username = getpass.getuser()

    # Copy <labname>.grades.txt file
    grade_filename = '/home/%s/%s.grades.txt' % (container_user, labname)
    command = "docker cp %s:%s /home/%s/%s" % (grade_container, grade_filename, username, host_home_xfer)
    logger.debug("Command to execute is (%s)" % command)
    result = subprocess.call(shlex.split(command))
    logger.debug("Result of subprocess.Popen exec cp %s.grades.txt file is %s" % (labname, result))
    if result == FAILURE:
        # try grabbing instructor.log
        command = "docker cp %s:/tmp/instructor.log /tmp/instructor.log" % (grade_container)
        result = subprocess.call(shlex.split(command))
        logger.debug("Result of subprocess.Popen exec cp instructor.log file is %s" % (result))
        cmd = 'docker stop %s' % grade_container
        labutils.DockerCmd(cmd)

    if copy_json:
        # Copy <labname>.grades.json file
        gradejson_filename = '/home/%s/%s.grades.json' % (container_user, labname)
        command = "docker cp %s:%s /home/%s/%s" % (grade_container, gradejson_filename, username, host_home_xfer)
        logger.debug("Command to execute is (%s)" % command)
        result = subprocess.call(shlex.split(command))
        logger.debug("Result of subprocess.Popen exec cp %s.grades.json file is %s" % (labname, result))
        if result == FAILURE:
            cmd = 'docker stop %s' % grade_container
            labutils.DockerCmd(cmd)


def diddleProfile(container_name):
    command = 'docker exec %s script -q -c "/home/instructor/.local/bin/rootprofile.sh" /dev/null' % (container_name)
    logger.debug("Command to execute is (%s)" % command)
    result = subprocess.call(command, shell=True)
    if result == FAILURE:
        logger.error("Failed to diddle profile container %s!\n" % container_name)
        sys.exit(1)

def autoGrade(grade_container, lab_path, labtainer_config, labname, copy_json, checkwork, web):
    retval = True
    cmd = "docker exec %s bash -c 'su - instructor -c \"cd;.local/bin/instructor.py %r\"'" % (grade_container, checkwork)
    if not labutils.DockerCmd(cmd):
        logger.error('Error occurred within the grader container.  \nSee $LABTAINER_DIR/logs/grader.log')
        command = 'docker cp %s:"/tmp/instructor.log" ../../logs/instructor.log' % (grade_container)
        logger.debug("Command to execute is (%s)" % command)
        result = subprocess.call(shlex.split(command))
        retval = False
    else:
        copyChownGradesFile(labtainer_config, labname, grade_container, 'instructor', copy_json)
        username = getpass.getuser()
        host_xfer = os.path.join('/home', username, labtainer_config.host_home_xfer, labname)
        fglob = glob.glob(host_xfer+'/*grades.txt')
        if len(fglob) == 0:
            print('No grades.txt file at %s' % host_xfer)
        else:
            with open(fglob[0]) as fh:
                for line in fh:
                    print(line.rstrip())
        if web: 
            labname = os.path.basename(lab_path)
            cmd = "docker exec %s bash -c 'su - instructor -c \"cd;.local/flask/server.py %s >/tmp/flex.log 2>&1 &\"'" % (grade_container, labname)
            if not labutils.DockerCmd(cmd):
                logger.error('Error occurred within the grader container.  \nSee $LABTAINER_DIR/logs/grader.log')
                command = 'docker cp %s:"/tmp/instructor.log" ../../logs/instructor.log' % (grade_container)
                logger.debug("Command to execute is (%s)" % command)
                result = subprocess.call(shlex.split(command))
                retval = False
            else:
                print('Point your browser to http://localhost:%d' % WEB_PORT)
        else:
            cmd = 'docker stop %s' % grade_container
            labutils.DockerCmd(cmd)
    return retval
   
def getGradeImageName(labtainer_config, registry):
    image_name = 'labtainer.grader'
    image_info = labutils.imageInfo(image_name , registry, registry, labtainer_config)
    if image_info is None:
        logger.error('Could not find image for %s' % image_name)
        exit(1)
    else:
        new_image_name = image_name
        if not image_info.local_build:
            new_image_name = '%s/%s' % (registry, image_name)
        if not image_info.local:
            labutils.dockerPull(registry, image_name)
    return new_image_name

def getRegistry(use_test_registry, labtainer_config):
    if not use_test_registry:
        env_test_registry = os.getenv('TEST_REGISTRY')
        if env_test_registry is not None and (env_test_registry.lower() == 'yes' or env_test_registry.lower() == 'true'):
            use_test_registry = True
    if use_test_registry:
        branch, use_registry = registry.getBranchRegistry()
        return use_registry
    else:
        return labtainer_config.default_registry

def checkRunning(lab):
    command = "docker ps"
    logger.debug("GetListRunningLab Command to execute is (%s)" % command)
    ps = subprocess.Popen(shlex.split(command), stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output = ps.communicate()
    if len(output[1].decode('utf-8').strip()) > 0:
        logger.error('Fail to get a list of running containers, error returned %s' % output[1].decode('utf-8'))
        sys.exit(1)
    if len(output[0].decode('utf-8')) > 0:
        docker_ps_output = output[0].decode('utf-8').split('\n')
        for line in docker_ps_output:
            if len(line.strip()) > 0:
                name = line.split()[-1]
                if name.endswith('-igrader'):
                    print('%s is currently running, it will be stopped before gradelab for %s is started.' % (name, lab))
                    cmd = 'docker stop %s' % name
                    labutils.DockerCmd(cmd)

def moreTerm(labname):
    grade_container = '%s-igrader' % labname
    spawn_command = "gnome-terminal -- docker exec -it %s bash -l cd /home/instructor &" % 	grade_container
    logger.debug("spawn_command is (%s)" % spawn_command)
    os.system(spawn_command)

def doGrade(labname, use_test_registry, debug, redo, update, web=False, regress_test=None, 
         copy_json=True, in_logger=None, checkwork=False, test_web=False):
    if in_logger is not None:
        logger = in_logger
    else:
        logger = labutils.logger
    checkRunning(labname)
    grade_container = '%s-igrader' % labname
    logger.debug('doGrade for %s' % grade_container)
    if redo:
        cmd = 'docker rm %s' % grade_container
        labutils.DockerCmd(cmd)
    lab_path = os.path.join(os.path.abspath('../../labs'), labname)
    if not os.path.isdir(lab_path):
        print('No lab found at %s' % lab_path)
        exit(1)
    labtainer_config_dir = os.path.join(os.path.dirname(os.path.dirname(lab_path)), 'config', 'labtainer.config')
    labtainer_config = ParseLabtainerConfig.ParseLabtainerConfig(labtainer_config_dir, logger)
    registry = getRegistry(use_test_registry, labtainer_config)
    grade_image = getGradeImageName(labtainer_config, registry)
    if update:
        removeGraders(registry)
    saki.checkBulkSaki(labname, logger)
    if not labutils.IsContainerCreated(grade_container):
        docker0_IPAddr = labutils.getDocker0IPAddr()
        if docker0_IPAddr is not None:
            add_host_param = '--add-host my_host:%s' % (docker0_IPAddr)
        else:
            add_host_param = '' 
        docs_path = os.path.join(os.getenv('LABTAINER_DIR'), 'docs')
        volume_param = '-v %s:/home/instructor/.local/flask/static/docs' % docs_path
        lab_doc_path = os.path.join(os.getenv('LABTAINER_DIR'), 'labs', labname, 'docs')
        volume_param += ' -v %s:/home/instructor/.local/flask/static/lab_doc' % lab_doc_path
        volume_param = volume_param+' --env="DISPLAY" --volume="/tmp/.X11-unix:/tmp/.X11-unix:rw"'
        if test_web:
            flask_path = os.path.join(os.getenv('LABTAINER_DIR'), 'scripts', 'labtainer-instructor', 'flask')
            volume_param = volume_param+' -v %s:/home/instructor/.local/flask' % flask_path
        cmd = "docker create -t --name=%s %s --hostname=%s -p %d:%d %s %s" % (grade_container, 
          add_host_param, grade_container, WEB_PORT, WEB_PORT, volume_param, grade_image)
        logger.debug("Command to execute was (%s)" % cmd)
        ps = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = ps.communicate()
        if len(output[1].decode('utf-8')) > 0:
            logger.error('command was %s' % cmd)
            logger.error(output[1].decode('utf-8'))
            exit(1)
    else:
        logger.debug('Container already exists')
    labutils.StartMyContainer(grade_container)
    InstDocsToHostDir(labname, labtainer_config, lab_path)
    logger.debug('do CopyStudentArtifacts for %s, labname: %s ' % (grade_container, labname))
    copy_result = CopyStudentArtifacts(labtainer_config, grade_container, labname, 
                     regress_test, False)
    if copy_result == FAILURE:
        logger.error("Failed to copy students' artifacts to container %s!\n" % grade_container)
        exit(1)
    copyAssessBin(grade_container, test_web)
    labutils.CopyInstrConfig(grade_container, 'instructor', lab_path)
    diddleProfile(grade_container)
    if debug:
        spawn_command = "gnome-terminal -- docker exec -it %s bash -l cd /home/instructor &" % 	grade_container
        logger.debug("spawn_command is (%s)" % spawn_command)
        os.system(spawn_command)
    else:
        autoGrade(grade_container, lab_path, labtainer_config, labname, copy_json, checkwork, (test_web | web))

def removeGraders(registry):
    cmd = 'docker ps -a'
    ps = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output = ps.communicate()
    container_list = []
    for line in output[0].decode('utf-8').splitlines():
        #print line
        if line.strip().endswith('-igrader'):
            container_list.append(line.split()[0])
    if len(container_list) > 0:
        cmd = 'docker rm %s' % ' '.join(container_list)
        #print(cmd)
        os.system(cmd)

    lab = sys.argv[1]
    cmd = 'docker images | grep grader'
    ps = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output = ps.communicate()
    image = 'labtainer.grader'
    image_find = '/%s' % image
    image_find2 = '%s' % image
    image_list = []
    for line in output[0].decode('utf-8').splitlines():
        #print line
        if (image_find in line or line.startswith(image_find2)) and ' <none> ' not in line:
            parts = line.split()
            image = '%s:%s' % (parts[0], parts[1])
            image_list.append(image)
    if len(image_list) > 0:
        cmd = 'docker rmi -f %s' % ' '.join(image_list)
        #print(cmd)
        os.system(cmd)
    else:   
        print('No images for %s' % image)
    cmd = 'docker pull %s/labtainer.grader' % registry
    os.system(cmd)

def main():
    parser = argparse.ArgumentParser(description='Grade a Labtainers lab')
    parser.add_argument('labname', default='NONE', nargs='?', action='store', help='The lab to grade')
    parser.add_argument('-r', '--redo', action='store_true', default=True, help='Creates new instance of the lab, previous work will be lost. This is the default.')
    parser.add_argument('-c', '--cumulative', action='store_true', help='Reuse the previous gradelab instance, adding any new files from the xfer directory.')
    parser.add_argument('-d', '--debug', action='store_true', help='Create the grading container leave it running with a terminal')
    parser.add_argument('-w', '--web', action='store_true', help='Start web server for analysis of student work.')
    parser.add_argument('-v', '--volume', action='store_true', help='Use local development flask directory mounted as a volume.')
    parser.add_argument('-t', '--test_registry', action='store_true', help='Use image from test registry')
    parser.add_argument('-u', '--update', action='store_true', help='Update grader image, deletes existing grader containers')
    parser.add_argument('-a', '--add_terminal', action='store_true', help='Create an additional virtual terminal attached to an existing grade \
                               container started with the -d option')
    parser.add_argument('-p', '--prompt', action='store_true', help='Prompt for user input before exiting.')
    args = parser.parse_args()
    labname = args.labname
    if args.add_terminal:
        moreTerm(labname)
    elif args.update and args.labname == 'NONE':
        removeGraders(registry)
        print('Graders have been removed, the next gradelab will pull a new grader')
    else:
        if args.cumulative:
            redo = False
        else:
            redo = True
        if args.update:
            redo = True
        doGrade(labname, args.test_registry, args.debug, redo, args.update, web=args.web, test_web=args.volume)
        if args.prompt:
            prompt = "Press <enter> to close."
            if sys.version_info >=(3,0):
                user_input = input(prompt)
            else:
                user_input = raw_input(prompt)

    
labutils.logger = LabtainerLogging.LabtainerLogging("grader.log", 'instructor', "../../config/labtainer.config")
labutils.logger.info("Begin logging") 
logger = labutils.logger
if __name__ == '__main__':
    sys.exit(main())

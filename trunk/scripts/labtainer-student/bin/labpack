#!/usr/bin/env python3
'''
This software was created by United States Government employees at 
The Center for Cybersecurity and Cyber Operations (C3O) 
at the Naval Postgraduate School NPS.  Please note that within the 
United States, copyright protection is not available for any works 
created  by United States Government employees, pursuant to Title 17 
United States Code Section 105.   This software is in the public domain 
and is not subject to copyright. 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
'''
import sys
import os
import argparse
import json
import glob
import shutil
import subprocess
import LabtainerLogging
'''
Track student progress completing labs in a Labpack.
'''
packroot = os.path.join(os.getenv('LABTAINER_DIR'), 'labpacks')
labroot = os.path.join(os.getenv('LABTAINER_DIR'), 'labs')
lab_list = os.listdir(labroot)
home = os.getenv('HOME')
''' Labpacks for this installation, used when updating. '''
labpack_path = os.path.join(home, '.local/share/labtainers/labpacks.txt')


def list():
    plist = {}
    print('List of installed Labpacks:')
    flist = os.listdir(packroot)
    for f in flist:
        parts = f.split('.',1)
        if len(parts)>1:
            pack_name = parts[0]
            pack_path = os.path.join(packroot, f)
            the_pack = []
            with open(pack_path) as fh:
                the_pack = json.load(fh)
            order = 0
            if 'order' in the_pack:
                order = int(the_pack['order'])
            if order not in plist:
                plist[order] = []
            plist[order].append(the_pack)

    for o in sorted(plist):
        for the_pack in plist[o]:
            print('\t%s  -- %s' % (the_pack['name'], the_pack['description']))
    
def update(logger, labpack_url):
    tfile = '/tmp/labpack.tar'
    try:
        os.rm(tfile)
    except:
        pass
    if labpack_url.startswith('file://'):
        shutil.copyfile(labpack_url[6:].strip(), '/tmp/labpack.tar')
        logger.debug('copied local file from %s' % labpack_url[6:])
    else:
        cmd = 'wget -L -O /tmp/labpack.tar %s' % labpack_url.strip()
        logger.debug('cmd is %s' % cmd)
        ps = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = ps.communicate()
        if len(output[1].strip()) > 0:
            for line in output[1].decode('utf-8').splitlines(True):
                logger.debug(line)
        if len(output[0].strip()) > 0:
            for line in output[0].decode('utf-8').splitlines(True):
                logger.debug(line)
    if os.path.isfile(tfile):
        logger.debug('Got tar, expand from %s' % labpack_url)
        cmd = 'tar -xf %s' % tfile
        print('Updating Labpack from %s' % labpack_url.strip())
        #print('expand into %s with command:' % os.getcwd())
        #print(cmd)
        ps = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        output = ps.communicate()
        if len(output[1].strip()) > 0:
            print('Error installing Labpack from %s, see $LABTAINER_DIR/logs/labpack.log' % labpack_url)
            for line in output[1].decode('utf-8').splitlines(True):
                logger.debug(line)
        if len(output[0].strip()) > 0:
            for line in output[0].decode('utf-8').splitlines(True):
                logger.debug(line)
    else:
        print('Unable to retreive Labpack tar from %s' % labpack_url)

def doUpdates(logger):
    logger.debug('doUpdates')
    if not doChdir():
        print('Labpack update failed')
    else:
        if not os.path.isfile(labpack_path):
            logger.debug('No labpacks at %s to update.' % labpack_path)
            print('No labpacks defined.')
            return 
        with open(labpack_path) as fh:
            for labpack_url in fh:
                update(logger, labpack_url)

def handlePack(pack_path):
    the_pack = []
    with open(pack_path) as fh:
        the_pack = json.load(fh)
    if len(the_pack['description']) > 0:
        print('Description: %s' % (the_pack['description']))
    for entry in the_pack['labs']:
        done = '[n]'
        lab = entry['name']
        xfer = os.path.join(os.getenv('HOME'), 'labtainer_xfer', lab)
        if os.path.isdir(xfer):
            gpath = os.path.join(xfer, '*.zip')
            glist = glob.glob(gpath)
            if len(glist) > 0:
                done = '[Y]'
        about_path = os.path.join(labroot, lab, 'config', 'about.txt')
        if os.path.isfile(about_path):
            with open(about_path) as about_fh:
                  print('%s %s\n\t%s' % (done, lab, about_fh.read()))
        else:
            print('%s %s' % (done, lab))
        if len(entry['notes']) > 0:
            print('\tNote: %s' % entry['notes'])

def doChdir():
    retval = True
    here = os.getcwd()
    try:
        os.chdir(packroot)
    except:
        print('could not cd to %s' % packroot)
        retval = False
    return retval

def main():
    try:
        os.makedirs(packroot)
    except:
        pass
    config_file = os.path.join(os.getenv('LABTAINER_DIR'), 'config', 'labtainer.config') 
    logger = LabtainerLogging.LabtainerLogging("/tmp/labpack.log", '', config_file)
    parser = argparse.ArgumentParser(prog='labpack', description='Track performance of labs in a Labpack')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('name', default='NONE', nargs='?', action='store', help='The Labpack to track.')
    group.add_argument('-a', '--add', action='store', help='Get a Labpack from a URL.')
    group.add_argument('-u', '--updates', action='store_true', default=False, help='Update Labpacks for this installation.')
    args = parser.parse_args()
    if len(sys.argv) < 2:
        list()
        if parser is None:
            print('IS NONE')
        print('\n')
        parser.print_help()
        exit(0)
    if args.add is not None:
        with open(labpack_path, 'a') as fh:
            logger.debug('Adding labpack path %s' % args.add)
            print('Adding labpack path %s' % args.add)
            fh.write(args.add+'\n')
        if doChdir():
            update(logger, args.add)
        else:
            print('Labpack failed')
    elif args.updates:
        doUpdates(logger)
    elif args.name is not 'NONE':
        pack_file = '%s.labpack' % args.name
        pack_path = os.path.join(packroot, pack_file)
        if not os.path.isfile(pack_path):
            print('Labpack not found: %s' % packname)
            list()
            print('\n')
            parser.print_help()
            exit(1)
        print('Labpack: %s' % args.name)
        handlePack(pack_path)

if __name__ == '__main__':
    sys.exit(main())

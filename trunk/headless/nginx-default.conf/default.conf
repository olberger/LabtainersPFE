server {
       listen     80 default_server;
       root     /usr/local/openresty/nginx/html;
       index index.html;
       resolver 127.0.0.11 valid=1s ipv6=off;
      location / {
       access_by_lua '
         local opts = {
           redirect_uri_path = "/index.html",
           accept_none_alg = true,
           discovery = "http://host.docker.internal:3333/auth/realms/myrealm/.well-known/openid-configuration",
           client_id = "nginx",
           client_secret = "SECRET_GOES_HERE",
           redirect_uri_scheme = "http",
           logout_path = "/logout",
           redirect_after_logout_uri = "http://host.docker.internal:3333/auth/realms/myrealm/protocol/openid-connect/logout?redirect_uri=http://localhost/",
           redirect_after_logout_with_id_token_hint = false,
           session_contents = {id_token=true}
         }
         -- call introspect for OAuth 2.0 Bearer Access Token validation
         local res, err = require("resty.openidc").authenticate(opts)
         if err then
           ngx.status = 403
           ngx.say(err)
           ngx.exit(ngx.HTTP_FORBIDDEN)
         end
        ';
        # proxy pass to novnc server
        proxy_pass http://novnc:8080/;
        #keep from timing out, set timeout to 1 hour.
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s; 
       #  disabled caching so the browser won't cache the site.
        expires           0;
        add_header        Cache-Control private;
      }
 
      location /websockify {
       access_by_lua '
         local opts = {
           redirect_uri_path = "/index.html",
           accept_none_alg = true,
           discovery = "http://host.docker.internal:3333/auth/realms/myrealm/.well-known/openid-configuration",
           client_id = "nginx",
           client_secret = "SECRET_GOES_HERE",
           redirect_uri_scheme = "http",
           logout_path = "/logout",
           redirect_after_logout_uri = "http://host.docker.internal:3333/auth/realms/myrealm/protocol/openid-connect/logout?redirect_uri=http://localhost/",
           redirect_after_logout_with_id_token_hint = false,
           session_contents = {id_token=true}
         }
         -- call introspect for OAuth 2.0 Bearer Access Token validation
         local res, err = require("resty.openidc").authenticate(opts)
         if err then
           ngx.status = 403
           ngx.say(err)
           ngx.exit(ngx.HTTP_FORBIDDEN)
         end
      ';
         # WebSocket support
         proxy_set_header HOST $host;
         proxy_set_header X-Real-IP $remote_addr;
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header X-Forwarded-Proto $scheme;
         proxy_pass_request_headers on;

         proxy_http_version 1.1;
         proxy_set_header Upgrade $http_upgrade;
         proxy_set_header Connection "upgrade";
 
         proxy_read_timeout 3600s;
         proxy_send_timeout 3600s;
 
         proxy_pass http://novnc:8080;
      }
 
      # redirect server error pages to the static page /40x.html
      #
      error_page 404 /404.html;
          location = /40x.html {
      }
      # redirect server error pages to the static page /50x.html
      #
      error_page 500 502 503 504 /50x.html;
          location = /50x.html {
      }
}

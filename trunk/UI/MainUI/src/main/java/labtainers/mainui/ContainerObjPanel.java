/*
This software was created by United States Government employees at 
The Center for Cybersecurity and Cyber Operations (C3O) 
at the Naval Postgraduate School NPS.  Please note that within the 
United States, copyright protection is not available for any works 
created  by United States Government employees, pursuant to Title 17 
United States Code Section 105.   This software is in the public 
domain and is not subject to copyright. 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */
package labtainers.mainui;

import java.awt.Component;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.SwingUtilities;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Daniel Liao
 */
public class ContainerObjPanel extends javax.swing.JPanel {

    /**
     * Creates new form ContainerObjPanel
     */
    private final MainWindow mainWindow;
    private final LabData.ContainerData data;

    // Constructor for loading a container object panel based on a container data object
    public ContainerObjPanel(MainWindow mainWindow, LabData.ContainerData data){
        initComponents();
        //editMenu.add(fixlocalMenuItem);
        //editMenu.add(editDockerMenuItem);
        //editMenu.add(openShellMenuItem);
        //editMenuBar.add(treataslocalMenuItem);
        //editMenuBar.add(editDockerMenuItem);
        editMenuBar.add(openShellMenuItem);
        editMenu.add(openShellMenuItem);
        this.data = data;
        this.mainWindow = mainWindow;
        this.containerAddHostScrollPaneBar = AddHostsScrollPane.getVerticalScrollBar();
        this.containerConfigNetworksScrollPaneBar = ContainerConfigNetworksScrollpane.getVerticalScrollBar();  
        this.ContainerLabelName.setText(this.data.name);
        this.RenameContainerTextfield.setVisible(false);
    }
    void setNameLabel(){
        String l = "Container: "+data.name+"  Base: "+getBaseName();
        this.containerLabel.setText(l);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ContainerConfigWindow = new javax.swing.JDialog();
        containerTabPane = new javax.swing.JTabbedPane();
        ContainerConfigGeneralTab = new javax.swing.JPanel();
        UserTF = new javax.swing.JTextField();
        PasswordTF = new javax.swing.JTextField();
        TerminalQuantitySpinner = new javax.swing.JSpinner();
        TerminalGroupTextfield = new javax.swing.JTextField();
        LabGatewayTextfield = new javax.swing.JTextField();
        NoGWCheckbox = new javax.swing.JCheckBox();
        X11Checkbox = new javax.swing.JCheckBox();
        ContainerConfigNetworksAddButton = new javax.swing.JButton();
        ContainerConfigNetworksScrollpane = new javax.swing.JScrollPane();
        ContainerConfigNetworksPanel = new javax.swing.JPanel();
        containerLabel = new javax.swing.JLabel();
        NoResolveCheckbox = new javax.swing.JCheckBox();
        ResolvConfTextfield = new javax.swing.JTextField();
        ContainerConfigDockerTab = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        RegistryTextfield = new javax.swing.JTextField();
        PublishTextfield = new javax.swing.JTextField();
        BaseRegistryTextfield = new javax.swing.JTextField();
        NoPrivilegeCheckbox = new javax.swing.JCheckBox();
        EditDockerfileButton = new javax.swing.JButton();
        ContainerConfigNetworkTab = new javax.swing.JPanel();
        AddHostsScrollPane = new javax.swing.JScrollPane();
        AddHostsSubPanel = new javax.swing.JPanel();
        AddHostLabel3 = new javax.swing.JLabel();
        ContainerConfigAddHostIPButton = new javax.swing.JButton();
        ContainerConfigAddHostNetworkButton = new javax.swing.JButton();
        ContainerConfigOtherTab = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        XtermTitleTextfield = new javax.swing.JTextField();
        XtermScriptTextfield = new javax.swing.JTextField();
        MyStuffCheckbox = new javax.swing.JCheckBox();
        NoPullCheckbox = new javax.swing.JCheckBox();
        ClonesSpinner = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        MountTextfield1 = new javax.swing.JTextField();
        MountTextfield2 = new javax.swing.JTextField();
        TapRadioButton = new javax.swing.JRadioButton();
        WaitForTextField = new javax.swing.JTextField();
        NumCPUTextField = new javax.swing.JTextField();
        CPUSetTextField = new javax.swing.JTextField();
        ContainerConfigGNS3Tab = new javax.swing.JPanel();
        ThumbVolumeLabel = new javax.swing.JLabel();
        HideLabel = new javax.swing.JLabel();
        ThumbCommandLabel = new javax.swing.JLabel();
        ThumbStopLabel = new javax.swing.JLabel();
        ThumbStopTextfield = new javax.swing.JTextField();
        ThumbVolumeTextfield = new javax.swing.JTextField();
        ThumbCommandTextfield = new javax.swing.JTextField();
        HideCheckbox = new javax.swing.JCheckBox();
        ContainerConfigUpdateButton = new javax.swing.JButton();
        ContainerConfigCancelButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        editMenuBar = new javax.swing.JMenu();
        editDockerMenuItem = new javax.swing.JMenuItem();
        fixlocalMenuItem = new javax.swing.JMenuItem();
        treataslocalMenuItem = new javax.swing.JMenuItem();
        openShellMenu = new javax.swing.JMenuItem();
        precheckMenuItem = new javax.swing.JMenuItem();
        ContainerRightClick = new javax.swing.JPopupMenu();
        editMenu = new javax.swing.JMenu();
        editDockerMenuItem1 = new javax.swing.JMenuItem();
        fixlocalMenuItem1 = new javax.swing.JMenuItem();
        treataslocalMenuItem1 = new javax.swing.JMenuItem();
        precheckMenuItem1 = new javax.swing.JMenuItem();
        openShellMenuItem = new javax.swing.JMenuItem();
        renameContainerOption = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        deleteContainerOption = new javax.swing.JMenuItem();
        copyContainerMenuItem = new javax.swing.JMenuItem();
        ContainerLabelName = new javax.swing.JLabel();
        RenameContainerTextfield = new javax.swing.JTextField();

        ContainerConfigWindow.setTitle("Container Configuration: ");
        ContainerConfigWindow.setMinimumSize(new java.awt.Dimension(601, 700));
        ContainerConfigWindow.setResizable(false);
        ContainerConfigWindow.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                ContainerConfigWindowWindowClosing(evt);
            }
        });

        containerTabPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        UserTF.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        UserTF.setText("ubuntu");
        UserTF.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "User name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        PasswordTF.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        PasswordTF.setToolTipText("Defaults to user name.");
        PasswordTF.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Password", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        PasswordTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordTFActionPerformed(evt);
            }
        });

        TerminalQuantitySpinner.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        TerminalQuantitySpinner.setModel(new javax.swing.SpinnerNumberModel(1, -1, null, 1));
        TerminalQuantitySpinner.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Terminal quantity", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        TerminalGroupTextfield.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        TerminalGroupTextfield.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Terminal group", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        LabGatewayTextfield.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LabGatewayTextfield.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lab Gateway", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        NoGWCheckbox.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        NoGWCheckbox.setText("No external gateway");

        X11Checkbox.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        X11Checkbox.setText("X11 enabled");

        ContainerConfigNetworksAddButton.setText("Add");
        ContainerConfigNetworksAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContainerConfigNetworksAddButtonActionPerformed(evt);
            }
        });

        ContainerConfigNetworksScrollpane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Networks", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        ContainerConfigNetworksScrollpane.setMaximumSize(new java.awt.Dimension(541, 32767));
        ContainerConfigNetworksScrollpane.setMinimumSize(new java.awt.Dimension(541, 136));
        ContainerConfigNetworksScrollpane.setPreferredSize(new java.awt.Dimension(541, 136));

        ContainerConfigNetworksPanel.setMaximumSize(new java.awt.Dimension(541, 32767));
        ContainerConfigNetworksPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        ContainerConfigNetworksPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        ContainerConfigNetworksScrollpane.setViewportView(ContainerConfigNetworksPanel);

        containerLabel.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        containerLabel.setText("jLabel6");

        NoResolveCheckbox.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        NoResolveCheckbox.setText("No resolv.conf server");
        NoResolveCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NoResolveCheckboxActionPerformed(evt);
            }
        });

        ResolvConfTextfield.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        ResolvConfTextfield.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "nameserver", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        javax.swing.GroupLayout ContainerConfigGeneralTabLayout = new javax.swing.GroupLayout(ContainerConfigGeneralTab);
        ContainerConfigGeneralTab.setLayout(ContainerConfigGeneralTabLayout);
        ContainerConfigGeneralTabLayout.setHorizontalGroup(
            ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigGeneralTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContainerConfigGeneralTabLayout.createSequentialGroup()
                        .addComponent(containerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(ContainerConfigGeneralTabLayout.createSequentialGroup()
                        .addComponent(ContainerConfigNetworksAddButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(ContainerConfigGeneralTabLayout.createSequentialGroup()
                        .addGroup(ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(UserTF, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PasswordTF, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ResolvConfTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LabGatewayTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ContainerConfigGeneralTabLayout.createSequentialGroup()
                                .addGap(91, 91, 91)
                                .addGroup(ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TerminalQuantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TerminalGroupTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContainerConfigGeneralTabLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NoGWCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(X11Checkbox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NoResolveCheckbox))
                                .addGap(22, 22, 22))))
                    .addComponent(ContainerConfigNetworksScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)))
        );
        ContainerConfigGeneralTabLayout.setVerticalGroup(
            ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigGeneralTabLayout.createSequentialGroup()
                .addGroup(ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ContainerConfigGeneralTabLayout.createSequentialGroup()
                        .addComponent(containerLabel)
                        .addGap(18, 18, 18)
                        .addGroup(ContainerConfigGeneralTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ContainerConfigGeneralTabLayout.createSequentialGroup()
                                .addComponent(TerminalQuantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(TerminalGroupTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(ContainerConfigGeneralTabLayout.createSequentialGroup()
                                .addComponent(UserTF, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PasswordTF, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(14, 14, 14)
                        .addComponent(LabGatewayTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ResolvConfTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ContainerConfigGeneralTabLayout.createSequentialGroup()
                        .addComponent(X11Checkbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NoGWCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NoResolveCheckbox)))
                .addGap(35, 35, 35)
                .addComponent(ContainerConfigNetworksAddButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ContainerConfigNetworksScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
        );

        containerTabPane.addTab("General ", ContainerConfigGeneralTab);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Base Registry:");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Registry:");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("No Privilege:");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Publish:");
        jLabel5.setToolTipText("<html>Optional arguments to the Docker --publish argument for<br>\nmaking container ports visible at the host interface. For example, a value of<br>\n127.0.0.1:60022:22/tcp<br>\nwill bind host port 60022 to container port 22.");

        RegistryTextfield.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        PublishTextfield.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        BaseRegistryTextfield.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        EditDockerfileButton.setText("Edit Dockerfile");
        EditDockerfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditDockerfileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ContainerConfigDockerTabLayout = new javax.swing.GroupLayout(ContainerConfigDockerTab);
        ContainerConfigDockerTab.setLayout(ContainerConfigDockerTabLayout);
        ContainerConfigDockerTabLayout.setHorizontalGroup(
            ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigDockerTabLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContainerConfigDockerTabLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(EditDockerfileButton))
                    .addGroup(ContainerConfigDockerTabLayout.createSequentialGroup()
                        .addGroup(ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PublishTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BaseRegistryTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RegistryTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NoPrivilegeCheckbox))
                        .addGap(0, 221, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ContainerConfigDockerTabLayout.setVerticalGroup(
            ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigDockerTabLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(EditDockerfileButton)
                .addGap(14, 14, 14)
                .addGroup(ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegistryTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BaseRegistryTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PublishTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(ContainerConfigDockerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(NoPrivilegeCheckbox))
                .addContainerGap(338, Short.MAX_VALUE))
        );

        containerTabPane.addTab("Docker", ContainerConfigDockerTab);

        AddHostsScrollPane.setMaximumSize(new java.awt.Dimension(548, 32767));
        AddHostsScrollPane.setMinimumSize(new java.awt.Dimension(548, 19));
        AddHostsScrollPane.setPreferredSize(new java.awt.Dimension(548, 100));

        AddHostsSubPanel.setMaximumSize(new java.awt.Dimension(0, 0));
        AddHostsSubPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        AddHostsSubPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        AddHostsScrollPane.setViewportView(AddHostsSubPanel);

        AddHostLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        AddHostLabel3.setText("Add-Hosts:");

        ContainerConfigAddHostIPButton.setText("Add Host:IP");
        ContainerConfigAddHostIPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContainerConfigAddHostIPButtonActionPerformed(evt);
            }
        });

        ContainerConfigAddHostNetworkButton.setText("Add Network");
        ContainerConfigAddHostNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContainerConfigAddHostNetworkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ContainerConfigNetworkTabLayout = new javax.swing.GroupLayout(ContainerConfigNetworkTab);
        ContainerConfigNetworkTab.setLayout(ContainerConfigNetworkTabLayout);
        ContainerConfigNetworkTabLayout.setHorizontalGroup(
            ContainerConfigNetworkTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigNetworkTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ContainerConfigNetworkTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddHostsScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(ContainerConfigNetworkTabLayout.createSequentialGroup()
                        .addComponent(AddHostLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ContainerConfigAddHostIPButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ContainerConfigAddHostNetworkButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ContainerConfigNetworkTabLayout.setVerticalGroup(
            ContainerConfigNetworkTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContainerConfigNetworkTabLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(ContainerConfigNetworkTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddHostLabel3)
                    .addComponent(ContainerConfigAddHostIPButton)
                    .addComponent(ContainerConfigAddHostNetworkButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddHostsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                .addContainerGap())
        );

        containerTabPane.addTab("Hosts", ContainerConfigNetworkTab);

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setText("Xterm:");

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setText("# of Clones:");

        jLabel11.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel11.setText("No Pull:");

        jLabel12.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel12.setText("My Stuff:");

        XtermTitleTextfield.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        XtermScriptTextfield.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        ClonesSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        ClonesSpinner.setMinimumSize(new java.awt.Dimension(45, 20));
        ClonesSpinner.setPreferredSize(new java.awt.Dimension(45, 20));

        jLabel13.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel13.setText("Mount:");

        MountTextfield1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        MountTextfield2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        TapRadioButton.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        TapRadioButton.setText("Tap");

        WaitForTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Wait for"));

        NumCPUTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Num CPUs"));

        CPUSetTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("CPU Set"));

        javax.swing.GroupLayout ContainerConfigOtherTabLayout = new javax.swing.GroupLayout(ContainerConfigOtherTab);
        ContainerConfigOtherTab.setLayout(ContainerConfigOtherTabLayout);
        ContainerConfigOtherTabLayout.setHorizontalGroup(
            ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigOtherTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContainerConfigOtherTabLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(XtermTitleTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(XtermScriptTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ContainerConfigOtherTabLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MountTextfield1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MountTextfield2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ContainerConfigOtherTabLayout.createSequentialGroup()
                        .addGroup(ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ContainerConfigOtherTabLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(4, 4, 4)
                                .addComponent(ClonesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(TapRadioButton))
                        .addGap(97, 97, 97)
                        .addGroup(ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ContainerConfigOtherTabLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(6, 6, 6)
                                .addComponent(NoPullCheckbox)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel12)
                                .addGap(1, 1, 1)
                                .addComponent(MyStuffCheckbox))
                            .addComponent(WaitForTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ContainerConfigOtherTabLayout.createSequentialGroup()
                        .addComponent(NumCPUTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(CPUSetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        ContainerConfigOtherTabLayout.setVerticalGroup(
            ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigOtherTabLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(XtermTitleTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(XtermScriptTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(MountTextfield1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MountTextfield2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(ClonesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(NoPullCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MyStuffCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ContainerConfigOtherTabLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))))
                .addGroup(ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContainerConfigOtherTabLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TapRadioButton))
                    .addGroup(ContainerConfigOtherTabLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(WaitForTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9)
                .addGroup(ContainerConfigOtherTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(NumCPUTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                    .addComponent(CPUSetTextField))
                .addContainerGap(274, Short.MAX_VALUE))
        );

        containerTabPane.addTab("Other", ContainerConfigOtherTab);

        ThumbVolumeLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ThumbVolumeLabel.setText("Thumb Volume:");

        HideLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        HideLabel.setText("Hide:");

        ThumbCommandLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ThumbCommandLabel.setText("Thumb Command:");

        ThumbStopLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ThumbStopLabel.setText("Thumb Stop:");

        javax.swing.GroupLayout ContainerConfigGNS3TabLayout = new javax.swing.GroupLayout(ContainerConfigGNS3Tab);
        ContainerConfigGNS3Tab.setLayout(ContainerConfigGNS3TabLayout);
        ContainerConfigGNS3TabLayout.setHorizontalGroup(
            ContainerConfigGNS3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigGNS3TabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ContainerConfigGNS3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ThumbStopLabel)
                    .addComponent(ThumbCommandLabel)
                    .addComponent(ThumbVolumeLabel)
                    .addComponent(HideLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ContainerConfigGNS3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ThumbStopTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ThumbVolumeTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ThumbCommandTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HideCheckbox))
                .addContainerGap(216, Short.MAX_VALUE))
        );
        ContainerConfigGNS3TabLayout.setVerticalGroup(
            ContainerConfigGNS3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigGNS3TabLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(ContainerConfigGNS3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ThumbVolumeTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ThumbVolumeLabel))
                .addGap(18, 18, 18)
                .addGroup(ContainerConfigGNS3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ThumbCommandTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ThumbCommandLabel))
                .addGap(18, 18, 18)
                .addGroup(ContainerConfigGNS3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ThumbStopTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ThumbStopLabel))
                .addGap(18, 18, 18)
                .addGroup(ContainerConfigGNS3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(HideLabel)
                    .addComponent(HideCheckbox))
                .addContainerGap(373, Short.MAX_VALUE))
        );

        containerTabPane.addTab("GNS3", ContainerConfigGNS3Tab);

        ContainerConfigUpdateButton.setText("OK");
        ContainerConfigUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContainerConfigUpdateButtonActionPerformed(evt);
            }
        });

        ContainerConfigCancelButton.setText("Cancel");
        ContainerConfigCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContainerConfigCancelButtonActionPerformed(evt);
            }
        });

        editMenuBar.setText("Edit");

        editDockerMenuItem.setText("dockerfile");
        editDockerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDockerMenuItemActionPerformed(evt);
            }
        });
        editMenuBar.add(editDockerMenuItem);

        fixlocalMenuItem.setText("fixlocal");
        fixlocalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixlocalMenuItemActionPerformed(evt);
            }
        });
        editMenuBar.add(fixlocalMenuItem);

        treataslocalMenuItem.setText("treataslocal");
        treataslocalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treataslocalMenuItemActionPerformed(evt);
            }
        });
        editMenuBar.add(treataslocalMenuItem);

        openShellMenu.setText("Open shell");
        openShellMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openShellMenuActionPerformed(evt);
            }
        });
        editMenuBar.add(openShellMenu);

        precheckMenuItem.setText("precheck");
        precheckMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precheckMenuItemActionPerformed(evt);
            }
        });
        editMenuBar.add(precheckMenuItem);

        jMenuBar1.add(editMenuBar);

        ContainerConfigWindow.setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout ContainerConfigWindowLayout = new javax.swing.GroupLayout(ContainerConfigWindow.getContentPane());
        ContainerConfigWindow.getContentPane().setLayout(ContainerConfigWindowLayout);
        ContainerConfigWindowLayout.setHorizontalGroup(
            ContainerConfigWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerConfigWindowLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ContainerConfigUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ContainerConfigCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(ContainerConfigWindowLayout.createSequentialGroup()
                .addComponent(containerTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 2, Short.MAX_VALUE))
        );
        ContainerConfigWindowLayout.setVerticalGroup(
            ContainerConfigWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContainerConfigWindowLayout.createSequentialGroup()
                .addComponent(containerTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(ContainerConfigWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ContainerConfigUpdateButton)
                    .addComponent(ContainerConfigCancelButton))
                .addGap(10, 10, 10))
        );

        editMenu.setText("Edit...");

        editDockerMenuItem1.setText("dockerfile");
        editDockerMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDockerMenuItem1ActionPerformed(evt);
            }
        });
        editMenu.add(editDockerMenuItem1);

        fixlocalMenuItem1.setText("fixlocal");
        fixlocalMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixlocalMenuItem1ActionPerformed(evt);
            }
        });
        editMenu.add(fixlocalMenuItem1);

        treataslocalMenuItem1.setText("treataslocal");
        treataslocalMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treataslocalMenuItem1ActionPerformed(evt);
            }
        });
        editMenu.add(treataslocalMenuItem1);

        precheckMenuItem1.setText("precheck");
        precheckMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precheckMenuItem1ActionPerformed(evt);
            }
        });
        editMenu.add(precheckMenuItem1);

        ContainerRightClick.add(editMenu);

        openShellMenuItem.setText("Open shell in container dir");
        openShellMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openShellMenuItemActionPerformed(evt);
            }
        });
        ContainerRightClick.add(openShellMenuItem);

        renameContainerOption.setText("rename");
        renameContainerOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameContainerOptionActionPerformed(evt);
            }
        });
        ContainerRightClick.add(renameContainerOption);
        ContainerRightClick.add(jSeparator1);

        deleteContainerOption.setText("delete");
        deleteContainerOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteContainerOptionActionPerformed(evt);
            }
        });
        ContainerRightClick.add(deleteContainerOption);

        copyContainerMenuItem.setText("Copy");
        copyContainerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyContainerMenuItemActionPerformed(evt);
            }
        });
        ContainerRightClick.add(copyContainerMenuItem);

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setMaximumSize(new java.awt.Dimension(340, 50));
        setPreferredSize(new java.awt.Dimension(340, 50));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        ContainerLabelName.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        ContainerLabelName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ContainerLabelName.setText("container_name");
        add(ContainerLabelName);

        RenameContainerTextfield.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        RenameContainerTextfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RenameContainerTextfield.setMinimumSize(new java.awt.Dimension(300, 35));
        RenameContainerTextfield.setName(""); // NOI18N
        RenameContainerTextfield.setPreferredSize(new java.awt.Dimension(300, 35));
        RenameContainerTextfield.setRequestFocusEnabled(false);
        RenameContainerTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                RenameContainerTextfieldFocusLost(evt);
            }
        });
        RenameContainerTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RenameContainerTextfieldActionPerformed(evt);
            }
        });
        add(RenameContainerTextfield);
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        containerPanelClickHandler(evt);
    }//GEN-LAST:event_formMouseClicked
    
    private void renameContainerOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameContainerOptionActionPerformed
        renameContainerButton();
    }//GEN-LAST:event_renameContainerOptionActionPerformed
    
    private void deleteContainerOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteContainerOptionActionPerformed
        deleteButton();
    }//GEN-LAST:event_deleteContainerOptionActionPerformed

    private void RenameContainerTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RenameContainerTextfieldActionPerformed
        renameButton();
    }//GEN-LAST:event_RenameContainerTextfieldActionPerformed

    private void RenameContainerTextfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_RenameContainerTextfieldFocusLost
        // hide the textfield and show the container label
        RenameContainerTextfield.setVisible(false);
        ContainerLabelName.setVisible(true);
    }//GEN-LAST:event_RenameContainerTextfieldFocusLost

    private void ContainerConfigWindowWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_ContainerConfigWindowWindowClosing
        closeConfigWindow();
    }//GEN-LAST:event_ContainerConfigWindowWindowClosing

    private void ContainerConfigUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContainerConfigUpdateButtonActionPerformed
        updateData();
    }//GEN-LAST:event_ContainerConfigUpdateButtonActionPerformed
    
    private void ContainerConfigCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContainerConfigCancelButtonActionPerformed
        closeConfigWindow();
    }//GEN-LAST:event_ContainerConfigCancelButtonActionPerformed
   
    private void EditDockerfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditDockerfileButtonActionPerformed
        editDockerfile();
    }//GEN-LAST:event_EditDockerfileButtonActionPerformed

    private void ContainerConfigNetworksAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContainerConfigNetworksAddButtonActionPerformed
        addContainerNetworkSubPanel("", "");
    }//GEN-LAST:event_ContainerConfigNetworksAddButtonActionPerformed

    private void ContainerConfigAddHostIPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContainerConfigAddHostIPButtonActionPerformed
        addAddHostSubPanel("ip","","","");
    }//GEN-LAST:event_ContainerConfigAddHostIPButtonActionPerformed

    private void ContainerConfigAddHostNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContainerConfigAddHostNetworkButtonActionPerformed
        addAddHostSubPanel("network","","","");
    }//GEN-LAST:event_ContainerConfigAddHostNetworkButtonActionPerformed

    private void editDockerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDockerMenuItemActionPerformed
        String dockerfilePath = mainWindow.getCurrentLab().getPath()+File.separator+"dockerfiles"+File.separator+
                                "Dockerfile."+mainWindow.getLabName()+"."+this.data.name+".student";
        String cmd = mainWindow.getTextEditor()+dockerfilePath+" &";
        mainWindow.doCommand(cmd); 
    }//GEN-LAST:event_editDockerMenuItemActionPerformed

    private void editBin(String fname){
        String full_path = mainWindow.getCurrentLab().getPath()+File.separator+this.data.name+File.separator+"_bin"+File.separator+
                                fname;
        String cmd = mainWindow.getTextEditor()+full_path+" &";
        //System.out.println("full_path cmd: "+cmd);
        mainWindow.doCommand(cmd); 
    }
    private void treataslocalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treataslocalMenuItemActionPerformed
        editBin("treataslocal");
    }//GEN-LAST:event_treataslocalMenuItemActionPerformed

    private void fixlocalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixlocalMenuItemActionPerformed
        editBin("fixlocal.sh");
    }//GEN-LAST:event_fixlocalMenuItemActionPerformed

    private void openShellMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openShellMenuItemActionPerformed
        String cmd = "gnome-terminal --working-directory="+mainWindow.getCurrentLab().getPath()+File.separator+data.name;
        System.out.println("cmd: "+cmd);
        mainWindow.doCommand(cmd);
    }//GEN-LAST:event_openShellMenuItemActionPerformed

    private void editDockerMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDockerMenuItem1ActionPerformed
        editDockerMenuItemActionPerformed(evt);
    }//GEN-LAST:event_editDockerMenuItem1ActionPerformed

    private void fixlocalMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixlocalMenuItem1ActionPerformed
        fixlocalMenuItemActionPerformed(evt);
    }//GEN-LAST:event_fixlocalMenuItem1ActionPerformed

    private void treataslocalMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treataslocalMenuItem1ActionPerformed
        treataslocalMenuItemActionPerformed(evt);
    }//GEN-LAST:event_treataslocalMenuItem1ActionPerformed

    private void openShellMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openShellMenuActionPerformed
        openShellMenuItemActionPerformed(evt);
    }//GEN-LAST:event_openShellMenuActionPerformed

    private void PasswordTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PasswordTFActionPerformed

    private void precheckMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precheckMenuItem1ActionPerformed
        editBin("precheck.sh");
    }//GEN-LAST:event_precheckMenuItem1ActionPerformed

    private void precheckMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precheckMenuItemActionPerformed
        editBin("precheck.sh");
    }//GEN-LAST:event_precheckMenuItemActionPerformed

    private void copyContainerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyContainerMenuItemActionPerformed
        try{
            mainWindow.saveLab(false, true);
        }catch (FileNotFoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                return;
        }
        String cmd = "new_lab_setup.py -A "+this.data.name+" newcontainer";
        mainWindow.doLabCommand(cmd);
        System.out.println("ran command "+cmd);
        mainWindow.reloadLab();
        ContainerObjPanel newPanel = mainWindow.getContainerPanel("newcontainer");
        if(newPanel != null){
            newPanel.renameContainerButton();
        }else{
            System.out.println("Error getting new container name");
        }
    }//GEN-LAST:event_copyContainerMenuItemActionPerformed

    private void NoResolveCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NoResolveCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NoResolveCheckboxActionPerformed
    
    // BUTTONS/HANDLERS //
    
    // Handle left-click or right-click event for the container obj panel
    private boolean clicked = false;
    private void containerPanelClickHandler(java.awt.event.MouseEvent evt){
       if(!clicked){
            if(SwingUtilities.isLeftMouseButton(evt)){
                clicked = true;
                loadDataIntoContainerPanel(); 
                ContainerConfigWindow.setVisible(true);  
            }
            else if(SwingUtilities.isRightMouseButton(evt)){
                ContainerRightClick.show(this, evt.getX(), evt.getY());
            }
        } 
    }
    
    // Handler for when Container Config Window closes
    private void closeConfigWindow(){
        ContainerConfigWindow.setVisible(false);
        clearLists();
        clicked = false;
    }
    
    // Clears the list of Networks and Add-Hosts Container Config Window UI
    private void clearLists(){
        // Clear Add-host
        Component[] componentList = AddHostsSubPanel.getComponents();
        for(Component c: componentList)
            AddHostsSubPanel.remove(c);
        
        containerAddHostPanelLength=0;
        AddHostsSubPanel.setPreferredSize(new Dimension(0,containerAddHostPanelLength));
        
        // Clear network
        componentList = ContainerConfigNetworksPanel.getComponents();
        for(Component c: componentList)
            ContainerConfigNetworksPanel.remove(c);
        
        containerConfigNetworksPanelLength=0;
        ContainerConfigNetworksPanel.setPreferredSize(new Dimension(0,containerConfigNetworksPanelLength));
    }
       
    // Prompt textfield for renaming 
    public void renameContainerButton(){
        // Make the rename textfield visible, active, and all text inside preselected
        RenameContainerTextfield.setText(this.data.name);
        RenameContainerTextfield.setVisible(true);
        RenameContainerTextfield.requestFocusInWindow();
        RenameContainerTextfield.selectAll();
        
        // Hide the original container label
        ContainerLabelName.setVisible(false);
    }
    
    // Prompts the user to confirm deletion of container and removes all traces of the container
    private void deleteButton(){
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the container '"+this.data.name+"'?\n"+
                                                                      "Deleting this will delete all references to this container, \n"+
                                                                      " Namely in the Results and Goals Configuration."
                                                                    , "Delete Container",  JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION){
            JPanel containerPanel = (JPanel)this.getParent();
           
            // Delete the container from the container list in the main data object
            mainWindow.getCurrentData().deleteReferenceToContainer(data.name);
            
            // Removes all results artifact lines with the container name in it in Results Conguration UI 
            if(mainWindow.getResultsUI() != null){
               mainWindow.getResultsUI().refresh(); 
            }
            
            // Remove the panel
            containerPanel.remove(this);

            // Shorten the panel height holding all the containers and resize it.
            mainWindow.containerPanePanelLength-=50;
            containerPanel.setPreferredSize(new Dimension(0,mainWindow.containerPanePanelLength));

            // Redraw the panel containing the list of containers
            containerPanel.revalidate();
            containerPanel.repaint(); 
           
            // Delete the container in the file system
            deleteContainer();
       }
    }
    
    // Deletes the container in the lab directory structure by calling 'new_lab_setup.py -d containername'
    private void deleteContainer(){
                //call python new_lab_script to delete container
                String cmd = "new_lab_setup.py -d "+this.data.name;
                mainWindow.doLabCommand(cmd);
    }

    // Prompts the user to confirm renaming the container
    private void renameButton(){
        // Prompt user to confirm their changes
        //int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to rename the container '"+this.data.name+"' to '"+
        //                                                                RenameContainerTextfield.getText()+"'?", "Rename Container",  JOptionPane.YES_NO_OPTION);
        //if (confirm == JOptionPane.YES_OPTION){
        if (true){
            String newName = RenameContainerTextfield.getText();
            if(newName.equals("newcontainer")){
                JOptionPane.showMessageDialog(null, "The name 'newcontainer' is reserved and cannot b used.", "Warning", JOptionPane.WARNING_MESSAGE);
            }else{
                //Refactor the mainUI's current LabData.ResultsData obj
                mainWindow.getCurrentData().getResultsData().refactorContainerReference(data.name, newName);
                
                // Refactor the container name in the result s UI
                if(mainWindow.getResultsUI() != null){
                    mainWindow.getResultsUI().refactorContainerReferenceInUI(data.name, newName);
                }
                
                // Rename the container in directory
                renameContainer(this.data.name,newName);
                
                // Rename the container in GUI and data object
                this.data.name = newName;
                ContainerLabelName.setText(newName);
                setNameLabel();
            }            
        }
        
        // hide the textfield and show the container label
        RenameContainerTextfield.setVisible(false);
        ContainerLabelName.setVisible(true);
    }
    
     // Renames the container in the lab directory structure by calling 'new_lab_setup.py -r oldName newName'
    private void renameContainer(String oldName, String newName){
        String cmd = "new_lab_setup.py -r "+oldName+" "+newName;
        mainWindow.doLabCommand(cmd); 
    }
    
    // Sets the data info based on the fields in the Container Configuration Window
    public void updateData(){
        // General Tab
        data.user = UserTF.getText();
        if(data.user.trim().length() == 0){
            JOptionPane.showMessageDialog(null, "User name must be defined.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        data.password = PasswordTF.getText();
        data.terminal_count = (int)TerminalQuantitySpinner.getValue();
        data.terminal_group = TerminalGroupTextfield.getText();
        data.lab_gateway = LabGatewayTextfield.getText();
        data.name_server = ResolvConfTextfield.getText();
        data.no_gw = NoGWCheckbox.isSelected();
        data.no_resolve = NoResolveCheckbox.isSelected();
            
        // List of Networks
        data.listOfContainerNetworks.clear(); //clear the networks so that is can be refilled with updated list of networks
        Component[] networkPanels = ContainerConfigNetworksPanel.getComponents();
        for(Component component: networkPanels){
            ContainerConfigNetworksSubpanel networkPanel = (ContainerConfigNetworksSubpanel)component;
            
            String networkName = networkPanel.getNetwork();
            //System.out.println("hi: \'"+networkName+"\'");
            String ipAddr = networkPanel.getIP();
            data.listOfContainerNetworks.add(new LabData.ContainerNetworkSubData(networkName,ipAddr));
        }
                
        // Docker
        data.registry = RegistryTextfield.getText();
        data.base_registry = BaseRegistryTextfield.getText();    
        data.publish = PublishTextfield.getText();
        data.no_privilege = NoPrivilegeCheckbox.isSelected();
                
        // Hosts
        data.listOfContainerAddHost.clear();
        Component[] addhostPanels = AddHostsSubPanel.getComponents();
        for(Component component: addhostPanels){
            ContainerConfigAddHosts addhostPanel = (ContainerConfigAddHosts)component;
              
            //String type
            String type;
            if(addhostPanel.getNetworkCombobox().isVisible())
                type = "network";
            else
                type = "ip";
            
            String host = addhostPanel.getHost();
            String ip = addhostPanel.getIp();
            String network = addhostPanel.getNetwork();
            data.listOfContainerAddHost.add(new LabData.ContainerAddHostSubData(type, host, ip, network));
        }

        // Other
        data.xterm_title = XtermTitleTextfield.getText();
        data.xterm_script = XtermScriptTextfield.getText();
        data.clone = (int)(ClonesSpinner.getValue());
        data.x11 = X11Checkbox.isSelected();
        data.no_pull = NoPullCheckbox.isSelected();    
        data.mystuff = MyStuffCheckbox.isSelected(); 
        data.tap = TapRadioButton.isSelected();
        data.mount1 = MountTextfield1.getText();       
        data.mount2 = MountTextfield2.getText();              
        data.wait_for = WaitForTextField.getText();
        data.num_cpus = NumCPUTextField.getText();
        data.cpu_set = CPUSetTextField.getText();
        // GNS3
        data.thumb_command = ThumbCommandTextfield.getText();    
        data.thumb_stop = ThumbStopTextfield.getText();           
        data.thumb_volume = ThumbVolumeTextfield.getText();           
        data.hide = HideCheckbox.isSelected();
        
        closeConfigWindow();
    }
    private String getBaseName(){
        String dockerfilePath = mainWindow.getCurrentLab().getPath()+File.separator+"dockerfiles"+File.separator+
                                    "Dockerfile."+mainWindow.getLabName()+"."+this.data.name+".student";
        String retval="not defined";
        String line;
        try{
            BufferedReader br = new BufferedReader(new FileReader(dockerfilePath));
        
            while ((line = br.readLine()) != null) 
            {
                if(line.startsWith("FROM")){
                    int i = line.lastIndexOf("/");
                    if(i>=0){
                        retval = line.substring(i+1).trim();
                    }else{
                        retval = line.substring(4).trim();
                    }
                }
            }
        }catch (FileNotFoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                mainWindow.output("ERROR dockerfile not found at "+dockerfilePath+" "+ex+"\n");
        }catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                mainWindow.output("ERROR FROM not found in  "+dockerfilePath+" "+ex+"\n");
        }
        return retval;
    }
    
    // Opens the container's dockerfile file in a terminal text editor
    private void editDockerfile(){
            String dockerfilePath = mainWindow.getCurrentLab().getPath()+File.separator+"dockerfiles"+File.separator+
                                    "Dockerfile."+mainWindow.getLabName()+"."+this.data.name+".student";
            String cmd = mainWindow.getTextEditor()+dockerfilePath+" &";
            mainWindow.doCommand(cmd); 
    }
    
    // Add Network Subpanel to the Container Config Window
    public int containerConfigNetworksPanelLength = 0;
    private final JScrollBar containerConfigNetworksScrollPaneBar;   
    private void addContainerNetworkSubPanel(String network, String ip){
         if(mainWindow.getCurrentData().getNetworkCount() == 0){
             mainWindow.output("No networks have been defined.\n");
             return;
         }
         //Resize the JPanel Holding all the containerConfigNetworksPanel to fit another containerConfigNetworksPanel 
        containerConfigNetworksPanelLength+=58;
        ContainerConfigNetworksPanel.setPreferredSize(new Dimension(0,containerConfigNetworksPanelLength));

        // Create the Container Obj Panel and add it
        ContainerConfigNetworksSubpanel newContainerConfigNetwork = new ContainerConfigNetworksSubpanel(this, mainWindow.getCurrentData(), network, ip);
        ContainerConfigNetworksPanel.add(newContainerConfigNetwork);

        // Redraw GUI with the new Panel
        ContainerConfigNetworksPanel.revalidate();
        ContainerConfigNetworksPanel.repaint();
        
        // Lower the Scroll Bar to show the newly added container
        containerConfigNetworksScrollPaneBar.setValue(58+containerConfigNetworksScrollPaneBar.getMaximum());
    }
   
    // Add Add-host Subpanel to Container Config Window
    public int containerAddHostPanelLength = 0;
    private final JScrollBar containerAddHostScrollPaneBar;   
    private void addAddHostSubPanel(String type, String host, String ip, String network){
        // Resize the JPanel Holding all the containerAddHostsPanel to fit another containerAddHostsPanel 
        containerAddHostPanelLength+=63;
        AddHostsSubPanel.setPreferredSize(new Dimension(0,containerAddHostPanelLength));

        // Create the Container Obj Panel and add it
        ContainerConfigAddHosts newContainerConfigAddHost = new ContainerConfigAddHosts(this, mainWindow.getCurrentData(), type, host, ip, network);
        AddHostsSubPanel.add(newContainerConfigAddHost);

        // Redraw GUI with the new Panel
        AddHostsSubPanel.revalidate();
        AddHostsSubPanel.repaint();
        
        // Lower the Scroll Bar to show the newly added container
        containerAddHostScrollPaneBar.setValue(63+containerAddHostScrollPaneBar.getMaximum());
    }
    
    // Set the fields of the Container Dialog Window with the data
    private void loadDataIntoContainerPanel(){
        this.ContainerConfigWindow.setTitle("Container Config: "+this.data.name);
        
        // General Tab
        if(data.user.trim().length() == 0){
            data.user = "ubuntu";
        }
        this.UserTF.setText(data.user);
        this.PasswordTF.setText(data.password);
        this.TerminalQuantitySpinner.setValue(data.terminal_count);
        this.LabGatewayTextfield.setText(data.lab_gateway);
        this.ResolvConfTextfield.setText(data.name_server);
        this.NoGWCheckbox.setSelected(data.no_gw);
        this.NoResolveCheckbox.setSelected(data.no_resolve);
        for(int i=0;i<data.listOfContainerNetworks.size();i++)
            addContainerNetworkSubPanel(data.listOfContainerNetworks.get(i).network_name, data.listOfContainerNetworks.get(i).network_ipaddress);
        
        // Add-hosts
        for(int i=0;i<data.listOfContainerAddHost.size();i++)
            addAddHostSubPanel(data.listOfContainerAddHost.get(i).type,        data.listOfContainerAddHost.get(i).add_host_host, 
                               data.listOfContainerAddHost.get(i).add_host_ip, data.listOfContainerAddHost.get(i).add_host_network);
        
        // GNS3
        this.ThumbCommandTextfield.setText(data.thumb_command);
        this.ThumbStopTextfield.setText(data.thumb_stop);
        this.ThumbVolumeTextfield.setText(data.thumb_volume);
        this.HideCheckbox.setSelected(data.hide);
        
        // Docker
        this.RegistryTextfield.setText(data.registry);
        this.BaseRegistryTextfield.setText(data.base_registry);
        this.PublishTextfield.setText(data.publish);
        this.NoPrivilegeCheckbox.setSelected(data.no_privilege);
        
        // Other
        this.TerminalGroupTextfield.setText(data.terminal_group);
        this.XtermTitleTextfield.setText(data.xterm_title);
        this.XtermScriptTextfield.setText(data.xterm_script);
        this.ClonesSpinner.setValue(data.clone);
        this.X11Checkbox.setSelected(data.x11);
        this.NoPullCheckbox.setSelected(data.no_pull);
        this.MyStuffCheckbox.setSelected(data.mystuff);
        this.TapRadioButton.setSelected(data.tap);
        this.MountTextfield1.setText(data.mount1);
        this.MountTextfield2.setText(data.mount2);
        this.WaitForTextField.setText(data.wait_for);
        this.NumCPUTextField.setText(data.num_cpus);
        this.CPUSetTextField.setText(data.cpu_set);
    }
    
    // Updates the comboboxes that reference the networks: ADDING, DELETING, RENAMING
    public void updateNetworkComboBoxes(String type, String network, String network2){
        switch(type){
            case "Add":
                //Add new item to the networks subpanels
                for(Component panel : ContainerConfigNetworksPanel.getComponents())
                    ((ContainerConfigNetworksSubpanel)panel).addNetworkToComboBox(network);
                //Add new item to the add-host subpanels
                for(Component panel : AddHostsSubPanel.getComponents())
                    ((ContainerConfigAddHosts)panel).addNetworkToComboBox(network);
                break;
            case "Delete":
                //Delete network in network subpanels
                for(Component panel : ContainerConfigNetworksPanel.getComponents()){
                    if(((ContainerConfigNetworksSubpanel)panel).getNetworkComboBox().getSelectedItem().equals(network))
                        ((ContainerConfigNetworksSubpanel)panel).remove();
                    else
                        ((ContainerConfigNetworksSubpanel)panel).deleteNetworkInComboBox(network);
                }
                
                //Delete network in add-host subpanels
                for(Component panel : AddHostsSubPanel.getComponents()){
                    //If the panel has the network selected, then remove the entire panel, otherwise just delete the network in the combobox list
                    boolean networkComboBoxExists = ((ContainerConfigAddHosts)panel).getNetworkCombobox().isVisible();
                    if(networkComboBoxExists){
                        //This nested if statement is neccessary since the boolean above could have nullpointerexception 
                        //from getSelectedItem() if the addhosts panel doesn't feature networks
                        boolean networkIsSelected = ((ContainerConfigAddHosts)panel).getNetworkCombobox().getSelectedItem().equals(network);
                        if(networkIsSelected) 
                            ((ContainerConfigAddHosts)panel).remove();
                        else
                            ((ContainerConfigAddHosts)panel).deleteNetworkInComboBox(network);
                    }
                }
                
                break;
            case "Rename":
                //Rename item to the networks subpanels
                for(Component panel : ContainerConfigNetworksPanel.getComponents()){
                    ((ContainerConfigNetworksSubpanel)panel).renameNetworkToComboBox(network, network2);
                }
                //Rename item to the add-host subpanels
                for(Component panel : AddHostsSubPanel.getComponents()){
                    ((ContainerConfigAddHosts)panel).renameNetworkToComboBox(network, network2);
                }
                break;
            default:
                System.out.println("Not valid updateNetworkComboBoxes() option.");
                break;
        }
        ContainerConfigNetworksPanel.revalidate();
        ContainerConfigNetworksPanel.repaint();
        AddHostsSubPanel.revalidate();
        AddHostsSubPanel.repaint();
    }
    
    // GETTERS //
    
    public LabData.ContainerData getConfigData(){
        return this.data;
    }
 
    public String getContainerName(){
        return this.data.name;
    }
    
    public JDialog getContainerConfigDialog(){
        return ContainerConfigWindow;
    }
    public boolean configShowing(){
        return ContainerConfigWindow.isShowing();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AddHostLabel3;
    private javax.swing.JScrollPane AddHostsScrollPane;
    private javax.swing.JPanel AddHostsSubPanel;
    private javax.swing.JTextField BaseRegistryTextfield;
    private javax.swing.JTextField CPUSetTextField;
    private javax.swing.JSpinner ClonesSpinner;
    private javax.swing.JButton ContainerConfigAddHostIPButton;
    private javax.swing.JButton ContainerConfigAddHostNetworkButton;
    private javax.swing.JButton ContainerConfigCancelButton;
    private javax.swing.JPanel ContainerConfigDockerTab;
    private javax.swing.JPanel ContainerConfigGNS3Tab;
    private javax.swing.JPanel ContainerConfigGeneralTab;
    private javax.swing.JPanel ContainerConfigNetworkTab;
    private javax.swing.JButton ContainerConfigNetworksAddButton;
    private javax.swing.JPanel ContainerConfigNetworksPanel;
    private javax.swing.JScrollPane ContainerConfigNetworksScrollpane;
    private javax.swing.JPanel ContainerConfigOtherTab;
    private javax.swing.JButton ContainerConfigUpdateButton;
    private javax.swing.JDialog ContainerConfigWindow;
    private javax.swing.JLabel ContainerLabelName;
    private javax.swing.JPopupMenu ContainerRightClick;
    private javax.swing.JButton EditDockerfileButton;
    private javax.swing.JCheckBox HideCheckbox;
    private javax.swing.JLabel HideLabel;
    private javax.swing.JTextField LabGatewayTextfield;
    private javax.swing.JTextField MountTextfield1;
    private javax.swing.JTextField MountTextfield2;
    private javax.swing.JCheckBox MyStuffCheckbox;
    private javax.swing.JCheckBox NoGWCheckbox;
    private javax.swing.JCheckBox NoPrivilegeCheckbox;
    private javax.swing.JCheckBox NoPullCheckbox;
    private javax.swing.JCheckBox NoResolveCheckbox;
    private javax.swing.JTextField NumCPUTextField;
    private javax.swing.JTextField PasswordTF;
    private javax.swing.JTextField PublishTextfield;
    private javax.swing.JTextField RegistryTextfield;
    private javax.swing.JTextField RenameContainerTextfield;
    private javax.swing.JTextField ResolvConfTextfield;
    private javax.swing.JRadioButton TapRadioButton;
    private javax.swing.JTextField TerminalGroupTextfield;
    private javax.swing.JSpinner TerminalQuantitySpinner;
    private javax.swing.JLabel ThumbCommandLabel;
    private javax.swing.JTextField ThumbCommandTextfield;
    private javax.swing.JLabel ThumbStopLabel;
    private javax.swing.JTextField ThumbStopTextfield;
    private javax.swing.JLabel ThumbVolumeLabel;
    private javax.swing.JTextField ThumbVolumeTextfield;
    private javax.swing.JTextField UserTF;
    private javax.swing.JTextField WaitForTextField;
    private javax.swing.JCheckBox X11Checkbox;
    private javax.swing.JTextField XtermScriptTextfield;
    private javax.swing.JTextField XtermTitleTextfield;
    private javax.swing.JLabel containerLabel;
    private javax.swing.JTabbedPane containerTabPane;
    private javax.swing.JMenuItem copyContainerMenuItem;
    private javax.swing.JMenuItem deleteContainerOption;
    private javax.swing.JMenuItem editDockerMenuItem;
    private javax.swing.JMenuItem editDockerMenuItem1;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu editMenuBar;
    private javax.swing.JMenuItem fixlocalMenuItem;
    private javax.swing.JMenuItem fixlocalMenuItem1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem openShellMenu;
    private javax.swing.JMenuItem openShellMenuItem;
    private javax.swing.JMenuItem precheckMenuItem;
    private javax.swing.JMenuItem precheckMenuItem1;
    private javax.swing.JMenuItem renameContainerOption;
    private javax.swing.JMenuItem treataslocalMenuItem;
    private javax.swing.JMenuItem treataslocalMenuItem1;
    // End of variables declaration//GEN-END:variables
}

/*
This software was created by United States Government employees at 
The Center for Cybersecurity and Cyber Operations (C3O) 
at the Naval Postgraduate School NPS.  Please note that within the 
United States, copyright protection is not available for any works 
created  by United States Government employees, pursuant to Title 17 
United States Code Section 105.   This software is in the public 
domain and is not subject to copyright. 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
 */
package labtainers.mainui;

import java.awt.Dimension;
import java.util.ArrayList;
import javax.swing.JPanel;

/**
 *
 * @author Daniel Liao
 */
public class ContainerConfigAddHosts extends javax.swing.JPanel {

    /**
     * Creates new form ContainerConfigAddHosts
     */
    private final ContainerObjPanel parent;
    public ContainerConfigAddHosts(ContainerObjPanel parent, LabData data, String type, String host, String ip, String network) {
        initComponents();
        this.parent = parent;
        
        // IP MODE
        if(type.equals("ip")){
            this.AddHostHostTF.setText(host);
            this.AddHostIpTF.setText(ip);
            this.AddHostNetworkCombobox.setVisible(false);
        }
        // NETWORK MODE
        else {
            //Fill the combobox with the current list of Networks
            for(int i = 0;i<data.getNetworks().size();i++)
                this.AddHostNetworkCombobox.addItem(data.getNetworks().get(i).name);
            
            this.AddHostNetworkCombobox.setSelectedItem(network); 
            this.AddHostHostTF.setVisible(false);
            this.AddHostIpTF.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AddHostIpTF = new javax.swing.JTextField();
        AddHostNetworkCombobox = new javax.swing.JComboBox<>();
        AddHostHostTF = new javax.swing.JTextField();
        AddHostDeleteButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setMaximumSize(new java.awt.Dimension(545, 58));
        setMinimumSize(new java.awt.Dimension(545, 58));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(545, 58));

        AddHostIpTF.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        AddHostHostTF.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        AddHostDeleteButton.setText("Delete");
        AddHostDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddHostDeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AddHostNetworkCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddHostHostTF, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddHostIpTF, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(AddHostDeleteButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddHostNetworkCombobox, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(AddHostHostTF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddHostDeleteButton)
                    .addComponent(AddHostIpTF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void AddHostDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddHostDeleteButtonActionPerformed
        remove();
    }//GEN-LAST:event_AddHostDeleteButtonActionPerformed

    // MANIPULATION //
    
    // Deletes this object
    protected void remove(){
        JPanel containerAddhostPanel = (JPanel)this.getParent();
       
       // delete the container from the list
       containerAddhostPanel.remove(this);

       // Shorten the panel height holding all the containers and resize it.
       parent.containerAddHostPanelLength-=63;
       containerAddhostPanel.setPreferredSize(new Dimension(0,parent.containerAddHostPanelLength));

       // Redraw the panel containing the list of containers
       containerAddhostPanel.revalidate();
       containerAddhostPanel.repaint(); 
    }

    // Adds network to combobox
    protected void addNetworkToComboBox(String newNetworkName){
        AddHostNetworkCombobox.addItem(newNetworkName);
    }
    
    // Deletes network from combobox
    protected void deleteNetworkInComboBox(String deletedNetwork){
        AddHostNetworkCombobox.removeItem(deletedNetwork);
    }
    
    // Updates the combobox list with the renamed network
    protected void renameNetworkToComboBox(String oldNetwork, String newNetwork){
        boolean updateSelectedItem = AddHostNetworkCombobox.getSelectedItem().equals(oldNetwork);
        ArrayList<String> tmp = new ArrayList<String>();
        
        //Create new list to set as the combobox items
        for(int i=0;i<AddHostNetworkCombobox.getItemCount();i++){
            if(AddHostNetworkCombobox.getItemAt(i).equals(oldNetwork))
                tmp.add(newNetwork);
            else
                tmp.add(AddHostNetworkCombobox.getItemAt(i));
        }
        
        // Empty the combobox items
        AddHostNetworkCombobox.removeAllItems();
        
        // Fill the combobox with updated list of items
        for(int i=0;i<tmp.size();i++)
            AddHostNetworkCombobox.addItem(tmp.get(i));
        
        // Set the selected item if the selected network was renamed
        if(updateSelectedItem)
            AddHostNetworkCombobox.setSelectedItem(newNetwork);
    }
    
    // GETTERS //
    
    public String getNetwork(){
        return (String)(AddHostNetworkCombobox.getSelectedItem());
    }
    
    public String getHost(){
        return AddHostHostTF.getText();
    }
    
    public String getIp(){
        return AddHostIpTF.getText();
    }
    
    public javax.swing.JComboBox<String> getNetworkCombobox(){
        return AddHostNetworkCombobox;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddHostDeleteButton;
    private javax.swing.JTextField AddHostHostTF;
    private javax.swing.JTextField AddHostIpTF;
    private javax.swing.JComboBox<String> AddHostNetworkCombobox;
    // End of variables declaration//GEN-END:variables
}
